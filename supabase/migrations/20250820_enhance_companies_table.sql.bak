-- Enhancement of companies table to support CanonicalCompany model
-- This migration adds missing fields and improves indexing for better performance

-- Add missing fields to companies table
ALTER TABLE companies 
ADD COLUMN IF NOT EXISTS tagline TEXT,
ADD COLUMN IF NOT EXISTS domain TEXT,
ADD COLUMN IF NOT EXISTS logo_url TEXT,
ADD COLUMN IF NOT EXISTS specialties TEXT,
ADD COLUMN IF NOT EXISTS follower_count INTEGER,
ADD COLUMN IF NOT EXISTS hq_address_line1 TEXT,
ADD COLUMN IF NOT EXISTS hq_address_line2 TEXT,
ADD COLUMN IF NOT EXISTS hq_postalcode TEXT,
ADD COLUMN IF NOT EXISTS hq_full_address TEXT,
ADD COLUMN IF NOT EXISTS email TEXT,
ADD COLUMN IF NOT EXISTS phone TEXT,
ADD COLUMN IF NOT EXISTS affiliated_companies JSONB DEFAULT '[]'::jsonb,
ADD COLUMN IF NOT EXISTS raw_data JSONB,
ADD COLUMN IF NOT EXISTS timestamp TIMESTAMPTZ DEFAULT NOW();

-- Add constraints for data integrity
ALTER TABLE companies
ADD CONSTRAINT check_email_format 
CHECK (email IS NULL OR email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'),

ADD CONSTRAINT check_employee_count_non_negative
CHECK (employee_count IS NULL OR employee_count >= 0),

ADD CONSTRAINT check_follower_count_non_negative  
CHECK (follower_count IS NULL OR follower_count >= 0),

ADD CONSTRAINT check_year_founded_reasonable
CHECK (year_founded IS NULL OR (year_founded >= 1600 AND year_founded <= EXTRACT(YEAR FROM NOW()) + 1)),

ADD CONSTRAINT check_company_name_not_empty
CHECK (char_length(trim(company_name)) > 0);

-- Create indexes for enhanced querying performance

-- Domain search index
CREATE INDEX IF NOT EXISTS idx_companies_domain 
ON companies(domain) 
WHERE domain IS NOT NULL;

-- Email search index  
CREATE INDEX IF NOT EXISTS idx_companies_email
ON companies(email)
WHERE email IS NOT NULL;

-- HQ location compound index
CREATE INDEX IF NOT EXISTS idx_companies_hq_location
ON companies(hq_city, hq_region, hq_country)
WHERE hq_city IS NOT NULL OR hq_region IS NOT NULL OR hq_country IS NOT NULL;

-- Employee count range index for size-based queries
CREATE INDEX IF NOT EXISTS idx_companies_employee_count_range
ON companies(employee_count)
WHERE employee_count IS NOT NULL;

-- Year founded index for age-based queries
CREATE INDEX IF NOT EXISTS idx_companies_year_founded
ON companies(year_founded)
WHERE year_founded IS NOT NULL;

-- Follower count index
CREATE INDEX IF NOT EXISTS idx_companies_follower_count
ON companies(follower_count)
WHERE follower_count IS NOT NULL;

-- JSONB indexes for nested data queries

-- Funding info JSONB index for funding queries
CREATE INDEX IF NOT EXISTS idx_companies_funding_info_gin
ON companies USING GIN(funding_info)
WHERE funding_info IS NOT NULL;

-- Locations JSONB index for location queries
CREATE INDEX IF NOT EXISTS idx_companies_locations_gin  
ON companies USING GIN(locations)
WHERE locations IS NOT NULL AND locations != '[]'::jsonb;

-- Affiliated companies JSONB index
CREATE INDEX IF NOT EXISTS idx_companies_affiliated_companies_gin
ON companies USING GIN(affiliated_companies)
WHERE affiliated_companies IS NOT NULL AND affiliated_companies != '[]'::jsonb;

-- Raw data JSONB index for flexible queries
CREATE INDEX IF NOT EXISTS idx_companies_raw_data_gin
ON companies USING GIN(raw_data)
WHERE raw_data IS NOT NULL;

-- Specialties text search index
CREATE INDEX IF NOT EXISTS idx_companies_specialties_gin
ON companies USING GIN(to_tsvector('english', specialties))
WHERE specialties IS NOT NULL;

-- Compound indexes for common query patterns

-- Company name + domain for duplicate detection
CREATE INDEX IF NOT EXISTS idx_companies_name_domain
ON companies(company_name, domain);

-- Location + size for company search
CREATE INDEX IF NOT EXISTS idx_companies_location_size
ON companies(hq_city, hq_country, employee_count);

-- Industry + size for filtering
CREATE INDEX IF NOT EXISTS idx_companies_industries_size
ON companies USING GIN(industries, employee_count);

-- Update the match_companies function to include new fields
CREATE OR REPLACE FUNCTION match_companies(
    query_embedding vector(1536),
    match_threshold float DEFAULT 0.2,
    match_count int DEFAULT 10
)
RETURNS TABLE (
    id uuid,
    linkedin_company_id text,
    company_name text,
    description text,
    domain text,
    industries text[],
    employee_count integer,
    hq_city text,
    hq_country text,
    similarity float
)
LANGUAGE sql STABLE
AS $$
    SELECT
        c.id,
        c.linkedin_company_id,
        c.company_name,
        c.description,
        c.domain,
        c.industries,
        c.employee_count,
        c.hq_city,
        c.hq_country,
        1 - (c.embedding <=> query_embedding) as similarity
    FROM companies c
    WHERE c.embedding IS NOT NULL
    AND 1 - (c.embedding <=> query_embedding) > match_threshold
    ORDER BY c.embedding <=> query_embedding
    LIMIT match_count;
$$;

-- Create helper functions for common operations

-- Function to get companies by size category
CREATE OR REPLACE FUNCTION get_companies_by_size_category(
    category text DEFAULT 'all',
    limit_count int DEFAULT 50
)
RETURNS TABLE (
    id uuid,
    company_name text,
    employee_count integer,
    size_category text
)
LANGUAGE sql STABLE
AS $$
    SELECT
        c.id,
        c.company_name,
        c.employee_count,
        CASE 
            WHEN c.employee_count IS NULL THEN 'Unknown'
            WHEN c.employee_count < 10 THEN 'Startup'
            WHEN c.employee_count < 50 THEN 'Small'
            WHEN c.employee_count < 200 THEN 'Medium'
            WHEN c.employee_count < 1000 THEN 'Large'
            ELSE 'Enterprise'
        END as size_category
    FROM companies c
    WHERE 
        CASE 
            WHEN category = 'startup' THEN c.employee_count < 10
            WHEN category = 'small' THEN c.employee_count >= 10 AND c.employee_count < 50
            WHEN category = 'medium' THEN c.employee_count >= 50 AND c.employee_count < 200
            WHEN category = 'large' THEN c.employee_count >= 200 AND c.employee_count < 1000
            WHEN category = 'enterprise' THEN c.employee_count >= 1000
            WHEN category = 'unknown' THEN c.employee_count IS NULL
            ELSE true
        END
    ORDER BY c.company_name
    LIMIT limit_count;
$$;

-- Function to get startup companies based on multiple criteria
CREATE OR REPLACE FUNCTION get_startup_companies(
    limit_count int DEFAULT 25
)
RETURNS TABLE (
    id uuid,
    company_name text,
    employee_count integer,
    year_founded integer,
    company_age integer,
    has_funding boolean,
    domain text
)
LANGUAGE sql STABLE
AS $$
    SELECT
        c.id,
        c.company_name,
        c.employee_count,
        c.year_founded,
        EXTRACT(YEAR FROM NOW())::integer - c.year_founded as company_age,
        (c.funding_info IS NOT NULL AND c.funding_info != '{}'::jsonb) as has_funding,
        c.domain
    FROM companies c
    WHERE 
        -- Small employee count (< 200)
        (c.employee_count IS NULL OR c.employee_count < 200)
        -- Young company (founded within last 10 years)
        AND (c.year_founded IS NULL OR c.year_founded > EXTRACT(YEAR FROM NOW()) - 10)
        -- Has startup-type funding or is small and young
        AND (
            (c.funding_info->>'last_funding_round_type' ILIKE ANY (ARRAY['%seed%', '%series a%', '%series b%', '%angel%']))
            OR 
            (
                (c.employee_count IS NULL OR c.employee_count < 50) 
                AND (c.year_founded IS NULL OR c.year_founded > EXTRACT(YEAR FROM NOW()) - 7)
            )
        )
    ORDER BY 
        CASE WHEN c.year_founded IS NOT NULL THEN c.year_founded END DESC,
        CASE WHEN c.employee_count IS NOT NULL THEN c.employee_count END ASC,
        c.company_name
    LIMIT limit_count;
$$;

-- Function to search companies by domain
CREATE OR REPLACE FUNCTION search_companies_by_domain(
    domain_query text,
    exact_match boolean DEFAULT false,
    limit_count int DEFAULT 20
)
RETURNS TABLE (
    id uuid,
    company_name text,
    domain text,
    website text,
    employee_count integer
)
LANGUAGE sql STABLE
AS $$
    SELECT
        c.id,
        c.company_name,
        c.domain,
        c.website,
        c.employee_count
    FROM companies c
    WHERE 
        CASE 
            WHEN exact_match THEN c.domain = lower(trim(domain_query))
            ELSE c.domain ILIKE '%' || lower(trim(domain_query)) || '%'
        END
    ORDER BY 
        CASE WHEN exact_match THEN 1 ELSE 2 END,
        c.company_name
    LIMIT limit_count;
$$;

-- Add comments for documentation
COMMENT ON COLUMN companies.tagline IS 'Company tagline or short slogan';
COMMENT ON COLUMN companies.domain IS 'Website domain (auto-extracted from website URL)';
COMMENT ON COLUMN companies.logo_url IS 'URL to company logo image';
COMMENT ON COLUMN companies.specialties IS 'Comma-separated list of company specialties';
COMMENT ON COLUMN companies.follower_count IS 'Number of LinkedIn followers';
COMMENT ON COLUMN companies.hq_address_line1 IS 'Headquarters address line 1';
COMMENT ON COLUMN companies.hq_address_line2 IS 'Headquarters address line 2';
COMMENT ON COLUMN companies.hq_postalcode IS 'Headquarters postal/ZIP code';
COMMENT ON COLUMN companies.hq_full_address IS 'Full headquarters address string';
COMMENT ON COLUMN companies.email IS 'Company contact email address';
COMMENT ON COLUMN companies.phone IS 'Company contact phone number';
COMMENT ON COLUMN companies.affiliated_companies IS 'JSONB array of affiliated companies (subsidiaries, parents, etc.)';
COMMENT ON COLUMN companies.raw_data IS 'Original raw data from data provider (Cassidy, etc.)';
COMMENT ON COLUMN companies.timestamp IS 'Timestamp when company data was processed/ingested';

-- Add function comments
COMMENT ON FUNCTION get_companies_by_size_category IS 'Get companies filtered by size category (startup, small, medium, large, enterprise, unknown)';
COMMENT ON FUNCTION get_startup_companies IS 'Get companies that match startup criteria: small, young, with startup funding patterns';
COMMENT ON FUNCTION search_companies_by_domain IS 'Search companies by domain name with exact or partial matching';

-- Update match_companies function comment
COMMENT ON FUNCTION match_companies IS 'Enhanced vector similarity search for companies including new fields like domain and location';
